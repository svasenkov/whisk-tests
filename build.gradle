import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'io.qameta.allure', name: 'allure-gradle', version: '2.7.0'
    }
}

group 'com.whisk'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.qameta.allure'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.testng:testng:6.14.3'
    implementation 'com.codeborne:selenide:5.2.8'
    implementation 'io.qameta.allure:allure-selenide:2.12.1'
    implementation 'io.rest-assured:rest-assured:3.2.0'
    implementation 'io.qameta.allure:allure-rest-assured:2.12.1'
    implementation 'org.hamcrest:hamcrest-all:1.3'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

allure {
    version = '2.7.0'
    aspectjweaver = true
    autoconfigure = true

    useTestNG {
        version = '2.9.0'
    }
}

tasks.withType(Test) {
    systemProperties = System.properties
    testLogging {
        // set options for log level LIFECYCLE
        events  TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT

        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        info {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Result: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                println("\n╔══${'═' * output.length()}══╗\n║  $output  ║\n╚══${'═' * output.length()}══╝")
            }
        }
    }
}
task AllTests(type: Test) {
    useTestNG() {
        options {
//            if(project.hasProperty("parallelType")) {
//                String pType = parallelType.toString()
//                setParallel(pType)
//            }
//            if (project.hasProperty("parallelThreads")) {
//                setThreadCount(parallelThreads.toInteger())
//            }
            suites 'src/test/resources/testngFiles/AllTests.xml'
        }
    }
}
